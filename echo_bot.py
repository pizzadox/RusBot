import json

import telebot
from telebot import types

# –ü–æ–¥–∫—é—á–∞–µ–º –ë–î

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ ( –Ω–µ —Ñ–∞–∫—Ç —á—Ç–æ —Ç—É—Ç, —Ç–∞–∫ –∫–∞–∫ –±—É–¥e—Ç —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç–∏–ø–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫–∏–∏

bot = telebot.TeleBot('5882698434:AAEQiUxsNuWmO3tesY7IU1fE-t9fPIc9xCQ')

import re # —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞. "—Ä–∞–∑–º–µ—Ä x y" –∏–ª–∏ "—Ä–∞–∑–º–µ—Ä x/y"
szPtrn = re.compile(r'(^—Ä–∞–∑–º–µ—Ä\s+|^\s*)(\d{3,4})(\s+|/)(\d{3,4})\s*$')
isNum  = re.compile(r'^\d{3,4}$')
oknoConst = re.compile(r'–æ–∫–Ω–æ') # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–∫–Ω–∞
class BotState():
    State = "start" #—Å–æ—Å—Ç–æ–Ω–∏–µ. –ø–æ–∫–∞ —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ –Ω–∞–¥–æ —ç—Ç–æ –æ–±—å—è–≤–ª—è—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É
    width=0; height =0 # –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Å—Ç—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    construction_id = 0 #orders.db construction id
    def __init__(self):
        self.State = ""
    def __repr__(self):
        ans = self.State + " width %d " % self.width + " height  %d " % self.height
        return ans
def mrkpMenu(*btns): # –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–ø–∏. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    for label in btns:
       markup.add(label)
    return markup
b = BotState()
bStates = {} # bStates[userid]
import okno #—Ñ–æ—Ä–º—É–ª—ã –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞

@bot.message_handler(commands=['debug'])
def dbg(message):
    print (bStates)
    bot.send_message(message.from_user.id, 'DBG OK')
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id not in bStates.keys():
        bStates[message.from_user.id] = BotState()
        print (message.from_user.id)  #dbg
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.from_user.id not in bStates.keys():
        bStates[message.from_user.id] = BotState()
        print (message.from_user.id)  #dbg
    b = bStates[message.from_user.id]  # —Å—Å—ã–ª–∫–∞, –Ω–µ –∫–æ–ø–∏—è, –ø–æ –∏–¥–µ–µ. —Ç.–µ. –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω—Ç—å—Å—è –¥–æ–ª–∂–µ–Ω

    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = mrkpMenu('–æ–∫–Ω–æ','–ù—É–∂–Ω–∞ –î–≤–µ—Ä—å','–°–æ–≤–µ—Ç—ã','–ó–Ω–∞—é —Ä–∞–∑–º–µ—Ä')
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '–ù—É–∂–Ω–æ –û–∫–Ω–æ':
        bot.send_message(message.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ?\n \n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://oknarus.com/tpost/mclj26nlh1-zaklinilo-okno-chto-delat)', parse_mode='Markdown')

    elif message.text == '–ù—É–∂–Ω–∞ –î–≤–µ—Ä—å':
        bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://oknarus.com/tpost/etcd6k6t11-okna-i-pozharnaya-bezopasnost)', parse_mode='Markdown')

    elif message.text == '–°–æ–≤–µ—Ç—ã':
        bot.send_message(message.from_user.id, '–ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ —Å–æ–≤–µ—Ç—ã –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://oknarus.com/#services)', parse_mode='Markdown')
    # –≤—ã–±–æ—Ä –æ–∫–Ω–∞
    elif oknoConst.match(message.text): #–æ–∫–Ω–æ
        oknoConstr = []
        oknoConstr = okno.window()
        #print(oknoConstr)
        markup = types.InlineKeyboardMarkup()
        for r in oknoConstr:
            name = r[0]
            description = r[1]
            image = r[2]
            markup.add( types.InlineKeyboardButton(text=r[0] , callback_data = '{"user_id": %d,' % message.from_user.id + '"okno": %d}' % r[3]))
        bot.send_message(message.from_user.id, "–í—ã–∏—É—Ä–∏—Ç–µ —Ç–∏–ø",reply_markup=markup)
        #bot.send_message(message.from_user.id, '–°—á–∏—Ç–∞–µ–º –û–∫–Ω–æ %s' % name, parse_mode='Markdown')

    elif mt := szPtrn.match( message.text): # (—Ä–∞–∑–º–µ—Ä )(—á–∏—Å–ª–æ1) () (—á–∏—Å–ª–æ2) (3-4—Ö –∑–Ω–∞—á–Ω—ã–µ
        a = int( mt.group(2) );b=int(mt.group(4))
        otvet = okno.answer(a,b)
        bot.send_message(message.from_user.id,   otvet)
    elif isNum.match( message.text):
        num = int(message.text) # –∑–¥–µ—Å—å —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ
        if b.State == 'get_size': # –°–Ω–∞—á–∞–ª–∞ —à–∏—Ä–∏–Ω–∞
            bot.send_message(message.from_user.id, "–®–∏—Ä–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ %d –º–º. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É" % num)
            b.width = num; b.State = "know_width"
        elif b.State == 'know_width': # —à–∏—Ä–∏–Ω—É –∑–Ω–∞–µ–º. —Ç–µ–ø–µ—Ä—å –≤—ã—Å–æ—Ç—É
            b.height = num; b.State ='know_size'
            otvet = okno.answer(b.width, b.height)
            bot.send_message(message.from_user.id,otvet,reply_markup=mrkpMenu('–†–∞—Å—á—ë—Ç','–æ–∫–Ω–æ')) # –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–±–µ
    elif message.text == '–ó–Ω–∞—é —Ä–∞–∑–º–µ—Ä':
        if b.State != 'know_size':
            bot.send_message(message.from_user.id, '–®–∏—Ä–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç :', parse_mode='Markdown')
            b.State = "get_size"
        else:
            otvet = okno.answer(b.width, b.height)
            bot.send_message(message.from_user.id, otvet)
            b.State = '' # —Å–±—Ä–æ—Å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π


        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å —É—Å–ª–æ–≤–∏–µ–º
    elif message.text == '–†–∞—Å—á—ë—Ç':
        ans1 = "–û–∫–Ω–æ —à–∏—Ä–∏–Ω–æ–π %d –º–º" % b.width + " –≤—ã—Å–æ—Ç–æ–π %d –º–º " %b.height  +  "—Ç–∏–ø–∞ ‚Ññ %d \n" % b.construction_id
        if (b.height and b.width and b.construction_id):
            ans2 = okno.answer(b.width, b.height)
            markup = mrkpMenu('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é')
        else:
            ans2 = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
            markup = mrkpMenu('–ó–Ω–∞—é —Ä–∞–∑–º–µ—Ä','–æ–∫–Ω–æ')
        bot.send_message(message.from_user.id,ans1 + ans2,reply_markup=markup)
@bot.callback_query_handler(func=lambda call: True) #–≤–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫
def callback_inline(call):
    if call.data: #//–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–∞, –¥–∞–ª–∞–µ–º —Å –Ω–∏–º–∏ —á—Ç–æ-—Ç–æ.
        print(call.data, call.id )
        cb=json.loads(call.data)
        ans = "Callback is working!"
        if cb['user_id'] in bStates.keys():
            print("callback for %d" % cb['user_id'])
            constr_id= int( cb['okno'] )
            print (constr_id);ans = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é ID %d" % constr_id
            b = bStates[cb['user_id']]
            b.construction_id = constr_id
            b.State = "get_tip"
            bot.send_message(cb['user_id'],"–¢—Ä–∞—Ç–∞—Ç–∞!",reply_markup=mrkpMenu('–†–∞—Å—á—ë—Ç',"–ó–Ω–∞—é —Ä–∞–∑–º–µ—Ä")) #–Ω–µ –≤—Å–µ–≥–¥–∞ –æ–±–µ
    bot.answer_callback_query(call.id, ans)

bot.polling(none_stop=True, interval=0) #–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
